// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"testsdkcreation/pkg/utils"
	"time"
)

type ResponseBodySuccessResponseStatus string

const (
	ResponseBodySuccessResponseStatusSuccess ResponseBodySuccessResponseStatus = "SUCCESS"
	ResponseBodySuccessResponseStatusFailed  ResponseBodySuccessResponseStatus = "FAILED"
)

func (e ResponseBodySuccessResponseStatus) ToPointer() *ResponseBodySuccessResponseStatus {
	return &e
}

func (e *ResponseBodySuccessResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCESS":
		fallthrough
	case "FAILED":
		*e = ResponseBodySuccessResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodySuccessResponseStatus: %v", v)
	}
}

type ResponseBodySuccessResponse struct {
	Message *string                            `json:"message,omitempty"`
	Status  *ResponseBodySuccessResponseStatus `json:"status,omitempty"`
}

func (o *ResponseBodySuccessResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *ResponseBodySuccessResponse) GetStatus() *ResponseBodySuccessResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

// ResponseBodyUserInfo - A user ID (UUID v4).
type ResponseBodyUserInfo struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseBodyUserInfo) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ResponseBodyVinInfo - A vehicle’s manufacturer identifier.
type ResponseBodyVinInfo struct {
	Vin *string `json:"vin,omitempty"`
}

func (o *ResponseBodyVinInfo) GetVin() *string {
	if o == nil {
		return nil
	}
	return o.Vin
}

type ResponseBodyCompatibilityResponse struct {
	Capabilities []Capability `json:"capabilities,omitempty"`
	Compatible   *bool        `json:"compatible,omitempty"`
	Reason       *string      `json:"reason,omitempty"`
}

func (o *ResponseBodyCompatibilityResponse) GetCapabilities() []Capability {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *ResponseBodyCompatibilityResponse) GetCompatible() *bool {
	if o == nil {
		return nil
	}
	return o.Compatible
}

func (o *ResponseBodyCompatibilityResponse) GetReason() *string {
	if o == nil {
		return nil
	}
	return o.Reason
}

type ResponseBodyBatteryCapacity struct {
	// The total capacity of the vehicle's battery (in kilowatt-hours).
	Capacity *float32 `json:"capacity,omitempty"`
}

func (o *ResponseBodyBatteryCapacity) GetCapacity() *float32 {
	if o == nil {
		return nil
	}
	return o.Capacity
}

type ResponseBodyBatteryLevel struct {
	// An EV battery’s state of charge (in percent).
	PercentRemaining *float32 `json:"percentRemaining,omitempty"`
	// The estimated remaining distance the vehicle can travel (in kilometers by default or in miles using the sc-unit-system).
	Range *float32 `json:"range,omitempty"`
}

func (o *ResponseBodyBatteryLevel) GetPercentRemaining() *float32 {
	if o == nil {
		return nil
	}
	return o.PercentRemaining
}

func (o *ResponseBodyBatteryLevel) GetRange() *float32 {
	if o == nil {
		return nil
	}
	return o.Range
}

type ResponseBodyChargeVoltage struct {
	// The voltage of the charger measured by the vehicle.
	Voltage *float32 `json:"voltage,omitempty"`
}

func (o *ResponseBodyChargeVoltage) GetVoltage() *float32 {
	if o == nil {
		return nil
	}
	return o.Voltage
}

type ResponseBodyChargeTime struct {
	// The date and time the vehicle expects to complete this charging session.
	Time *time.Time `json:"time,omitempty"`
}

func (r ResponseBodyChargeTime) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseBodyChargeTime) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ResponseBodyChargeTime) GetTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.Time
}

type ResponseBodyChargeLimit struct {
	// The level at which the vehicle should stop charging and be considered fully charged (in percent).
	Limit *float32 `json:"limit,omitempty"`
}

func (o *ResponseBodyChargeLimit) GetLimit() *float32 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type ResponseBodyChargeStatusState string

const (
	ResponseBodyChargeStatusStateCharging     ResponseBodyChargeStatusState = "CHARGING"
	ResponseBodyChargeStatusStateFullyCharged ResponseBodyChargeStatusState = "FULLY_CHARGED"
	ResponseBodyChargeStatusStateNotCharging  ResponseBodyChargeStatusState = "NOT_CHARGING"
)

func (e ResponseBodyChargeStatusState) ToPointer() *ResponseBodyChargeStatusState {
	return &e
}

func (e *ResponseBodyChargeStatusState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHARGING":
		fallthrough
	case "FULLY_CHARGED":
		fallthrough
	case "NOT_CHARGING":
		*e = ResponseBodyChargeStatusState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyChargeStatusState: %v", v)
	}
}

type ResponseBodyChargeStatus struct {
	// Indicates whether a charging cable is currently plugged into the vehicle’s charge port.
	IsPluggedIn *bool                          `json:"isPluggedIn,omitempty"`
	State       *ResponseBodyChargeStatusState `json:"state,omitempty"`
}

func (o *ResponseBodyChargeStatus) GetIsPluggedIn() *bool {
	if o == nil {
		return nil
	}
	return o.IsPluggedIn
}

func (o *ResponseBodyChargeStatus) GetState() *ResponseBodyChargeStatusState {
	if o == nil {
		return nil
	}
	return o.State
}

type ResponseBodyEngineOil struct {
	// The engine oil’s remaining life span (as a percentage). Oil life is based on the current quality of the oil. (in percent).
	LifeRemaining *float32 `json:"lifeRemaining,omitempty"`
}

func (o *ResponseBodyEngineOil) GetLifeRemaining() *float32 {
	if o == nil {
		return nil
	}
	return o.LifeRemaining
}

type ResponseBodyTirePressure struct {
	// The current air pressure of the back left tire (in kilopascals by default or in pounds per square inch using the sc-unit-system).
	BackLeft *float32 `json:"backLeft,omitempty"`
	// The current air pressure of the back right tire (in kilopascals by default or in pounds per square inch using the sc-unit-system).
	BackRight *float32 `json:"backRight,omitempty"`
	// The current air pressure of the front left tire (in kilopascals by default or in pounds per square inch using the sc-unit-system).
	FrontLeft *float32 `json:"frontLeft,omitempty"`
	// The current air pressure of the front right tire (in kilopascals by default or in pounds per square inch using the sc-unit-system).
	FrontRight *float32 `json:"frontRight,omitempty"`
}

func (o *ResponseBodyTirePressure) GetBackLeft() *float32 {
	if o == nil {
		return nil
	}
	return o.BackLeft
}

func (o *ResponseBodyTirePressure) GetBackRight() *float32 {
	if o == nil {
		return nil
	}
	return o.BackRight
}

func (o *ResponseBodyTirePressure) GetFrontLeft() *float32 {
	if o == nil {
		return nil
	}
	return o.FrontLeft
}

func (o *ResponseBodyTirePressure) GetFrontRight() *float32 {
	if o == nil {
		return nil
	}
	return o.FrontRight
}

type ResponseBodyFuelTank struct {
	// The amount of fuel in the tank (in liters by default or in gallons (U.S.) using the sc-unit-system).
	AmountRemaining *float32 `json:"amountRemaining,omitempty"`
	// The remaining level of fuel in the tank (in percent).
	PercentRemaining *float32 `json:"percentRemaining,omitempty"`
	// The estimated remaining distance the car can travel (in kilometers by default or in miles using the sc-unit-system).
	Range *float32 `json:"range,omitempty"`
}

func (o *ResponseBodyFuelTank) GetAmountRemaining() *float32 {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *ResponseBodyFuelTank) GetPercentRemaining() *float32 {
	if o == nil {
		return nil
	}
	return o.PercentRemaining
}

func (o *ResponseBodyFuelTank) GetRange() *float32 {
	if o == nil {
		return nil
	}
	return o.Range
}

type ResponseBodyOdometer struct {
	Distance *float32 `json:"distance,omitempty"`
}

func (o *ResponseBodyOdometer) GetDistance() *float32 {
	if o == nil {
		return nil
	}
	return o.Distance
}

type ResponseBodyLocation struct {
	Latitude  float32 `json:"latitude"`
	Longitude float32 `json:"longitude"`
}

func (o *ResponseBodyLocation) GetLatitude() float32 {
	if o == nil {
		return 0.0
	}
	return o.Latitude
}

func (o *ResponseBodyLocation) GetLongitude() float32 {
	if o == nil {
		return 0.0
	}
	return o.Longitude
}

type ResponseBodyType string

const (
	ResponseBodyTypeResponseBodyLocation              ResponseBodyType = "Response_body_Location"
	ResponseBodyTypeResponseBodyOdometer              ResponseBodyType = "Response_body_Odometer"
	ResponseBodyTypeResponseBodyFuelTank              ResponseBodyType = "Response_body_FuelTank"
	ResponseBodyTypeResponseBodyTirePressure          ResponseBodyType = "Response_body_TirePressure"
	ResponseBodyTypeResponseBodyEngineOil             ResponseBodyType = "Response_body_EngineOil"
	ResponseBodyTypeResponseBodyChargeStatus          ResponseBodyType = "Response_body_ChargeStatus"
	ResponseBodyTypeResponseBodyChargeLimit           ResponseBodyType = "Response_body_ChargeLimit"
	ResponseBodyTypeResponseBodyChargeTime            ResponseBodyType = "Response_body_ChargeTime"
	ResponseBodyTypeResponseBodyChargeVoltage         ResponseBodyType = "Response_body_ChargeVoltage"
	ResponseBodyTypeResponseBodyBatteryLevel          ResponseBodyType = "Response_body_BatteryLevel"
	ResponseBodyTypeResponseBodyBatteryCapacity       ResponseBodyType = "Response_body_BatteryCapacity"
	ResponseBodyTypeResponseBodyCompatibilityResponse ResponseBodyType = "Response_body_CompatibilityResponse"
	ResponseBodyTypeResponseBodyVinInfo               ResponseBodyType = "Response_body_VinInfo"
	ResponseBodyTypeResponseBodyUserInfo              ResponseBodyType = "Response_body_UserInfo"
	ResponseBodyTypeResponseBodySuccessResponse       ResponseBodyType = "Response_body_SuccessResponse"
)

type ResponseBody struct {
	ResponseBodyLocation              *ResponseBodyLocation
	ResponseBodyOdometer              *ResponseBodyOdometer
	ResponseBodyFuelTank              *ResponseBodyFuelTank
	ResponseBodyTirePressure          *ResponseBodyTirePressure
	ResponseBodyEngineOil             *ResponseBodyEngineOil
	ResponseBodyChargeStatus          *ResponseBodyChargeStatus
	ResponseBodyChargeLimit           *ResponseBodyChargeLimit
	ResponseBodyChargeTime            *ResponseBodyChargeTime
	ResponseBodyChargeVoltage         *ResponseBodyChargeVoltage
	ResponseBodyBatteryLevel          *ResponseBodyBatteryLevel
	ResponseBodyBatteryCapacity       *ResponseBodyBatteryCapacity
	ResponseBodyCompatibilityResponse *ResponseBodyCompatibilityResponse
	ResponseBodyVinInfo               *ResponseBodyVinInfo
	ResponseBodyUserInfo              *ResponseBodyUserInfo
	ResponseBodySuccessResponse       *ResponseBodySuccessResponse

	Type ResponseBodyType
}

func CreateResponseBodyResponseBodyLocation(responseBodyLocation ResponseBodyLocation) ResponseBody {
	typ := ResponseBodyTypeResponseBodyLocation

	return ResponseBody{
		ResponseBodyLocation: &responseBodyLocation,
		Type:                 typ,
	}
}

func CreateResponseBodyResponseBodyOdometer(responseBodyOdometer ResponseBodyOdometer) ResponseBody {
	typ := ResponseBodyTypeResponseBodyOdometer

	return ResponseBody{
		ResponseBodyOdometer: &responseBodyOdometer,
		Type:                 typ,
	}
}

func CreateResponseBodyResponseBodyFuelTank(responseBodyFuelTank ResponseBodyFuelTank) ResponseBody {
	typ := ResponseBodyTypeResponseBodyFuelTank

	return ResponseBody{
		ResponseBodyFuelTank: &responseBodyFuelTank,
		Type:                 typ,
	}
}

func CreateResponseBodyResponseBodyTirePressure(responseBodyTirePressure ResponseBodyTirePressure) ResponseBody {
	typ := ResponseBodyTypeResponseBodyTirePressure

	return ResponseBody{
		ResponseBodyTirePressure: &responseBodyTirePressure,
		Type:                     typ,
	}
}

func CreateResponseBodyResponseBodyEngineOil(responseBodyEngineOil ResponseBodyEngineOil) ResponseBody {
	typ := ResponseBodyTypeResponseBodyEngineOil

	return ResponseBody{
		ResponseBodyEngineOil: &responseBodyEngineOil,
		Type:                  typ,
	}
}

func CreateResponseBodyResponseBodyChargeStatus(responseBodyChargeStatus ResponseBodyChargeStatus) ResponseBody {
	typ := ResponseBodyTypeResponseBodyChargeStatus

	return ResponseBody{
		ResponseBodyChargeStatus: &responseBodyChargeStatus,
		Type:                     typ,
	}
}

func CreateResponseBodyResponseBodyChargeLimit(responseBodyChargeLimit ResponseBodyChargeLimit) ResponseBody {
	typ := ResponseBodyTypeResponseBodyChargeLimit

	return ResponseBody{
		ResponseBodyChargeLimit: &responseBodyChargeLimit,
		Type:                    typ,
	}
}

func CreateResponseBodyResponseBodyChargeTime(responseBodyChargeTime ResponseBodyChargeTime) ResponseBody {
	typ := ResponseBodyTypeResponseBodyChargeTime

	return ResponseBody{
		ResponseBodyChargeTime: &responseBodyChargeTime,
		Type:                   typ,
	}
}

func CreateResponseBodyResponseBodyChargeVoltage(responseBodyChargeVoltage ResponseBodyChargeVoltage) ResponseBody {
	typ := ResponseBodyTypeResponseBodyChargeVoltage

	return ResponseBody{
		ResponseBodyChargeVoltage: &responseBodyChargeVoltage,
		Type:                      typ,
	}
}

func CreateResponseBodyResponseBodyBatteryLevel(responseBodyBatteryLevel ResponseBodyBatteryLevel) ResponseBody {
	typ := ResponseBodyTypeResponseBodyBatteryLevel

	return ResponseBody{
		ResponseBodyBatteryLevel: &responseBodyBatteryLevel,
		Type:                     typ,
	}
}

func CreateResponseBodyResponseBodyBatteryCapacity(responseBodyBatteryCapacity ResponseBodyBatteryCapacity) ResponseBody {
	typ := ResponseBodyTypeResponseBodyBatteryCapacity

	return ResponseBody{
		ResponseBodyBatteryCapacity: &responseBodyBatteryCapacity,
		Type:                        typ,
	}
}

func CreateResponseBodyResponseBodyCompatibilityResponse(responseBodyCompatibilityResponse ResponseBodyCompatibilityResponse) ResponseBody {
	typ := ResponseBodyTypeResponseBodyCompatibilityResponse

	return ResponseBody{
		ResponseBodyCompatibilityResponse: &responseBodyCompatibilityResponse,
		Type:                              typ,
	}
}

func CreateResponseBodyResponseBodyVinInfo(responseBodyVinInfo ResponseBodyVinInfo) ResponseBody {
	typ := ResponseBodyTypeResponseBodyVinInfo

	return ResponseBody{
		ResponseBodyVinInfo: &responseBodyVinInfo,
		Type:                typ,
	}
}

func CreateResponseBodyResponseBodyUserInfo(responseBodyUserInfo ResponseBodyUserInfo) ResponseBody {
	typ := ResponseBodyTypeResponseBodyUserInfo

	return ResponseBody{
		ResponseBodyUserInfo: &responseBodyUserInfo,
		Type:                 typ,
	}
}

func CreateResponseBodyResponseBodySuccessResponse(responseBodySuccessResponse ResponseBodySuccessResponse) ResponseBody {
	typ := ResponseBodyTypeResponseBodySuccessResponse

	return ResponseBody{
		ResponseBodySuccessResponse: &responseBodySuccessResponse,
		Type:                        typ,
	}
}

func (u *ResponseBody) UnmarshalJSON(data []byte) error {

	responseBodyOdometer := new(ResponseBodyOdometer)
	if err := utils.UnmarshalJSON(data, &responseBodyOdometer, "", true, true); err == nil {
		u.ResponseBodyOdometer = responseBodyOdometer
		u.Type = ResponseBodyTypeResponseBodyOdometer
		return nil
	}

	responseBodyEngineOil := new(ResponseBodyEngineOil)
	if err := utils.UnmarshalJSON(data, &responseBodyEngineOil, "", true, true); err == nil {
		u.ResponseBodyEngineOil = responseBodyEngineOil
		u.Type = ResponseBodyTypeResponseBodyEngineOil
		return nil
	}

	responseBodyChargeLimit := new(ResponseBodyChargeLimit)
	if err := utils.UnmarshalJSON(data, &responseBodyChargeLimit, "", true, true); err == nil {
		u.ResponseBodyChargeLimit = responseBodyChargeLimit
		u.Type = ResponseBodyTypeResponseBodyChargeLimit
		return nil
	}

	responseBodyChargeTime := new(ResponseBodyChargeTime)
	if err := utils.UnmarshalJSON(data, &responseBodyChargeTime, "", true, true); err == nil {
		u.ResponseBodyChargeTime = responseBodyChargeTime
		u.Type = ResponseBodyTypeResponseBodyChargeTime
		return nil
	}

	responseBodyChargeVoltage := new(ResponseBodyChargeVoltage)
	if err := utils.UnmarshalJSON(data, &responseBodyChargeVoltage, "", true, true); err == nil {
		u.ResponseBodyChargeVoltage = responseBodyChargeVoltage
		u.Type = ResponseBodyTypeResponseBodyChargeVoltage
		return nil
	}

	responseBodyBatteryCapacity := new(ResponseBodyBatteryCapacity)
	if err := utils.UnmarshalJSON(data, &responseBodyBatteryCapacity, "", true, true); err == nil {
		u.ResponseBodyBatteryCapacity = responseBodyBatteryCapacity
		u.Type = ResponseBodyTypeResponseBodyBatteryCapacity
		return nil
	}

	responseBodyVinInfo := new(ResponseBodyVinInfo)
	if err := utils.UnmarshalJSON(data, &responseBodyVinInfo, "", true, true); err == nil {
		u.ResponseBodyVinInfo = responseBodyVinInfo
		u.Type = ResponseBodyTypeResponseBodyVinInfo
		return nil
	}

	responseBodyUserInfo := new(ResponseBodyUserInfo)
	if err := utils.UnmarshalJSON(data, &responseBodyUserInfo, "", true, true); err == nil {
		u.ResponseBodyUserInfo = responseBodyUserInfo
		u.Type = ResponseBodyTypeResponseBodyUserInfo
		return nil
	}

	responseBodyLocation := new(ResponseBodyLocation)
	if err := utils.UnmarshalJSON(data, &responseBodyLocation, "", true, true); err == nil {
		u.ResponseBodyLocation = responseBodyLocation
		u.Type = ResponseBodyTypeResponseBodyLocation
		return nil
	}

	responseBodyChargeStatus := new(ResponseBodyChargeStatus)
	if err := utils.UnmarshalJSON(data, &responseBodyChargeStatus, "", true, true); err == nil {
		u.ResponseBodyChargeStatus = responseBodyChargeStatus
		u.Type = ResponseBodyTypeResponseBodyChargeStatus
		return nil
	}

	responseBodyBatteryLevel := new(ResponseBodyBatteryLevel)
	if err := utils.UnmarshalJSON(data, &responseBodyBatteryLevel, "", true, true); err == nil {
		u.ResponseBodyBatteryLevel = responseBodyBatteryLevel
		u.Type = ResponseBodyTypeResponseBodyBatteryLevel
		return nil
	}

	responseBodySuccessResponse := new(ResponseBodySuccessResponse)
	if err := utils.UnmarshalJSON(data, &responseBodySuccessResponse, "", true, true); err == nil {
		u.ResponseBodySuccessResponse = responseBodySuccessResponse
		u.Type = ResponseBodyTypeResponseBodySuccessResponse
		return nil
	}

	responseBodyFuelTank := new(ResponseBodyFuelTank)
	if err := utils.UnmarshalJSON(data, &responseBodyFuelTank, "", true, true); err == nil {
		u.ResponseBodyFuelTank = responseBodyFuelTank
		u.Type = ResponseBodyTypeResponseBodyFuelTank
		return nil
	}

	responseBodyCompatibilityResponse := new(ResponseBodyCompatibilityResponse)
	if err := utils.UnmarshalJSON(data, &responseBodyCompatibilityResponse, "", true, true); err == nil {
		u.ResponseBodyCompatibilityResponse = responseBodyCompatibilityResponse
		u.Type = ResponseBodyTypeResponseBodyCompatibilityResponse
		return nil
	}

	responseBodyTirePressure := new(ResponseBodyTirePressure)
	if err := utils.UnmarshalJSON(data, &responseBodyTirePressure, "", true, true); err == nil {
		u.ResponseBodyTirePressure = responseBodyTirePressure
		u.Type = ResponseBodyTypeResponseBodyTirePressure
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ResponseBody) MarshalJSON() ([]byte, error) {
	if u.ResponseBodyLocation != nil {
		return utils.MarshalJSON(u.ResponseBodyLocation, "", true)
	}

	if u.ResponseBodyOdometer != nil {
		return utils.MarshalJSON(u.ResponseBodyOdometer, "", true)
	}

	if u.ResponseBodyFuelTank != nil {
		return utils.MarshalJSON(u.ResponseBodyFuelTank, "", true)
	}

	if u.ResponseBodyTirePressure != nil {
		return utils.MarshalJSON(u.ResponseBodyTirePressure, "", true)
	}

	if u.ResponseBodyEngineOil != nil {
		return utils.MarshalJSON(u.ResponseBodyEngineOil, "", true)
	}

	if u.ResponseBodyChargeStatus != nil {
		return utils.MarshalJSON(u.ResponseBodyChargeStatus, "", true)
	}

	if u.ResponseBodyChargeLimit != nil {
		return utils.MarshalJSON(u.ResponseBodyChargeLimit, "", true)
	}

	if u.ResponseBodyChargeTime != nil {
		return utils.MarshalJSON(u.ResponseBodyChargeTime, "", true)
	}

	if u.ResponseBodyChargeVoltage != nil {
		return utils.MarshalJSON(u.ResponseBodyChargeVoltage, "", true)
	}

	if u.ResponseBodyBatteryLevel != nil {
		return utils.MarshalJSON(u.ResponseBodyBatteryLevel, "", true)
	}

	if u.ResponseBodyBatteryCapacity != nil {
		return utils.MarshalJSON(u.ResponseBodyBatteryCapacity, "", true)
	}

	if u.ResponseBodyCompatibilityResponse != nil {
		return utils.MarshalJSON(u.ResponseBodyCompatibilityResponse, "", true)
	}

	if u.ResponseBodyVinInfo != nil {
		return utils.MarshalJSON(u.ResponseBodyVinInfo, "", true)
	}

	if u.ResponseBodyUserInfo != nil {
		return utils.MarshalJSON(u.ResponseBodyUserInfo, "", true)
	}

	if u.ResponseBodySuccessResponse != nil {
		return utils.MarshalJSON(u.ResponseBodySuccessResponse, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ResponseCode string

const (
	ResponseCodeTwoHundred  ResponseCode = "200"
	ResponseCodeFiveHundred ResponseCode = "500"
)

func (e ResponseCode) ToPointer() *ResponseCode {
	return &e
}

func (e *ResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "200":
		fallthrough
	case "500":
		*e = ResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseCode: %v", v)
	}
}

type Response struct {
	Body    *ResponseBody `json:"body,omitempty"`
	Code    *ResponseCode `json:"code,omitempty"`
	Headers []Header      `json:"headers,omitempty"`
	Path    *string       `json:"path,omitempty"`
}

func (o *Response) GetBody() *ResponseBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Response) GetCode() *ResponseCode {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Response) GetHeaders() []Header {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Response) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}
